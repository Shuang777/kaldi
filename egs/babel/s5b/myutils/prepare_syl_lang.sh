#!/bin/bash
# Copyright 2012-2013  Johns Hopkins University (Author: Daniel Povey);
#                      Arnab Ghoshal
#           2014       Hang Su

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
# WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
# MERCHANTABLITY OR NON-INFRINGEMENT.
# See the Apache 2 License for the specific language governing permissions and
# limitations under the License.

# This script prepares a directory such as data/lang/, in the standard format,
# given a source directory containing a dictionary lexicon.txt in a form like:
# word phone1 phone2 ... phoneN
# per line (alternate prons would be separate lines), or a dictionary with probabilities
# called lexiconp.txt in a form:
# word pron-prob phone1 phone2 ... phoneN
# (with 0.0 < pron-prob <= 1.0); note: if lexiconp.txt exists, we use it even if
# lexicon.txt exists.
# and also files silence_phones.txt, nonsilence_phones.txt, optional_silence.txt
# and extra_questions.txt
# Here, silence_phones.txt and nonsilence_phones.txt are lists of silence and
# non-silence phones respectively (where silence includes various kinds of 
# noise, laugh, cough, filled pauses etc., and nonsilence phones includes the 
# "real" phones.)
# In each line of those files is a list of phones, and the phones on each line 
# are assumed to correspond to the same "base phone", i.e. they will be 
# different stress or tone variations of the same basic phone.
# The file "optional_silence.txt" contains just a single phone (typically SIL) 
# which is used for optional silence in the lexicon.
# extra_questions.txt might be empty; typically will consist of lists of phones,
# all members of each list with the same stress or tone; and also possibly a 
# list for the silence phones.  This will augment the automtically generated 
# questions (note: the automatically generated ones will treat all the 
# stress/tone versions of a phone the same, so will not "get to ask" about 
# stress or tone).

# This script adds word-position-dependent phones and constructs a host of other
# derived files, that go in data/lang/.

{

set -e
set -o pipefail

echo "$0 $@"

# Begin configuration section.
num_sil_states=5
num_nonsil_states=3
position_dependent_phones=true
# position_dependent_phones is false also when position dependent phones and word_boundary.txt 
# have been generated by another source
reverse=false
share_silence_phones=false  # if true, then share pdfs of different silence 
                            # phones together.
sil_prob=0.5
make_individual_sil_models=false # enforce individual models for all silence phones
# end configuration sections

. utils/parse_options.sh 

if [ $# -ne 4 ]; then 
  echo "usage: utils/prepare_lang.sh <dict-src-dir> <oov-dict-entry> <tmp-dir> <lang-dir>"
  echo "e.g.: utils/prepare_lang.sh data/local/dict <SPOKEN_NOISE> data/local/lang data/lang"
  echo "<dict-src-dir> should contain the following files:"
  echo " extra_questions.txt  lexicon.txt nonsilence_phones.txt  optional_silence.txt  silence_phones.txt"
  echo "See http://kaldi.sourceforge.net/data_prep.html#data_prep_lang_creating for more info."
  echo "options: "
  echo "     --num-sil-states <number of states>             # default: 5, #states in silence models."
  echo "     --num-nonsil-states <number of states>          # default: 3, #states in non-silence models."
  echo "     --position-dependent-phones (true|false)        # default: true; if true, use _B, _E, _S & _I"
  echo "                                                     # markers on phones to indicate word-internal positions. "
  echo "     --reverse (true|false)                          # reverse lexicon."
  echo "     --share-silence-phones (true|false)             # default: false; if true, share pdfs of "
  echo "                                                     # all non-silence phones. "
  echo "     --sil-prob <probability of silence>             # default: 0.5 [must have 0 <= silprob < 1]"
  echo "     --make-individual-sil-models (true|false)       # default: false; make non-{shared,split} states for each silphone"
  exit 1;
fi

srcdir=$1
oov_word=$2
tmpdir=$3
dir=$4
mkdir -p $dir $tmpdir $dir/phones

[ -f path.sh ] && . ./path.sh

! utils/validate_dict_dir.pl $srcdir && \
  echo "*Error validating directory $srcdir*" && exit 1;

myutils/prepare_syl_lexicon.pl $srcdir $tmpdir

# add disambig symbols to the lexicon in $tmpdir/lexiconp.syl2phn.txt and $tmpdir/lexiconp.sylwrd2phn.txt
# and produce $tmpdir/lexicon_disambig.syl2phn.txt and $tmpdir/lexicon_disambig.sylwrd2phn.txt

ndisambig=`utils/add_lex_disambig.pl --pron-probs $tmpdir/lexiconp.syl2phn.txt $tmpdir/lexiconp_disambig.syl2phn.txt`
ndisambig=$[$ndisambig+1]; # add one disambig symbol for silence in lexicon FST.
echo $ndisambig > $tmpdir/lex_ndisambig.syl2phn

# Format of lexiconp_disambig.txt:
# !SIL	1.0   SIL_S
# <SPOKEN_NOISE>	1.0   SPN_S #1
# <UNK>	1.0  SPN_S #2
# <NOISE>	1.0  NSN_S
# !EXCLAMATION-POINT	1.0  EH2_B K_I S_I K_I L_I AH0_I M_I EY1_I SH_I AH0_I N_I P_I OY2_I N_I T_E

( for n in `seq 0 $ndisambig`; do echo '#'$n; done ) >$dir/phones/disambig.syl2phn.txt

# Create phone symbol table.
echo "<eps>" | cat - $dir/phones/{silence,nonsilence,disambig.syl2phn}.txt | \
  awk '{n=NR-1; print $1, n;}' > $dir/phones.syl2phn.txt 

if $position_dependent_phones; then
  awk 'NR==FNR {
         if (NF == 3) { print $3, "singleton";}
         else if (NF > 3){
           print $3, "begin";
           for (i=4; i<NF; i++) {
             print $i, "internal";
           }
           print $NF, "end";}
         else { 
           print "NF shall be bigger than 2";
           exit(1);
         }
         next;
       }
       !/_B|_I|_S|_E/ { print $1, "nonword";}' $tmpdir/lexiconp.syl2phn.txt $dir/phones/{silence,nonsilence}.txt > $dir/phones/word_boundary.syl2phn.txt
else
  [ -f $srcdir/word_boundary.syl2phn.txt ] && cp $srcdir/word_boundary.syl2phn.txt $dir/phones/word_boundary.syl2phn.txt
fi

cat $tmpdir/lexiconp.syl2phn.txt | awk '{print $1}' | sort | uniq  | \
 awk 'BEGIN{print "<eps> 0";} {printf("%s %d\n", $1, NR);} END{printf("#0 %d\n", NR+1);} ' \
   > $dir/syls.txt

silphone=`cat $srcdir/optional_silence.txt` || exit 1;
[ -z "$silphone" ] && \
  ( echo "You have no optional-silence phone; it is required in the current scripts"
    echo "but you may use the option --sil-prob 0.0 to stop it being used." ) && \
   exit 1;

# create $dir/phones/align_lexicon.{txt,int}.
# This is the new-new style of lexicon aligning.

# First remove pron-probs from the lexicon.
perl -ape 's/(\S+\s+)\S+\s+(.+)/$1$2/;' <$tmpdir/lexiconp.syl2phn.txt >$tmpdir/align_lexicon.syl2phn.txt

# Note: here, $silphone will have no suffix e.g. _S because it occurs as optional-silence,
# and is not part of a word.
[ ! -z "$silphone" ] && echo "<eps> $silphone" >> $tmpdir/align_lexicon.syl2phn.txt

cat $tmpdir/align_lexicon.syl2phn.txt | \
 perl -ane '@A = split; print $A[0], " ", join(" ", @A), "\n";' | sort | uniq > $dir/phones/align_lexicon.syl2phn.txt

# create phones/align_lexicon.int
cat $dir/phones/align_lexicon.syl2phn.txt | utils/sym2int.pl -f 3- $dir/phones.syl2phn.txt | \
  utils/sym2int.pl -f 1-2 $dir/syls.txt > $dir/phones/align_lexicon.syl2phn.int

# Create the basic L.fst without disambiguation symbols, for use
# in training. 
utils/make_lexicon_fst.pl --pron-probs $tmpdir/lexiconp.syl2phn.txt $sil_prob $silphone | \
  fstcompile --isymbols=$dir/phones.syl2phn.txt --osymbols=$dir/syls.txt \
  --keep_isymbols=false --keep_osymbols=false | \
   fstarcsort --sort_type=olabel > $dir/L.syl2phn.fst || exit 1;

for f in disambig; do
  utils/sym2int.pl $dir/phones.syl2phn.txt <$dir/phones/$f.syl2phn.txt >$dir/phones/$f.syl2phn.int
  utils/sym2int.pl $dir/phones.syl2phn.txt <$dir/phones/$f.syl2phn.txt | \
  awk '{printf(":%d", $1);} END{printf "\n"}' | sed s/:// > $dir/phones/$f.syl2phn.csl || exit 1;
done

#if $position_dependent_phones; then
if [ -f $dir/phones/word_boundary.syl2phn.txt ]; then
  utils/sym2int.pl -f 1 $dir/phones.syl2phn.txt <$dir/phones/word_boundary.syl2phn.txt \
    > $dir/phones/word_boundary.syl2phn.int || exit 1;
fi

# Create the lexicon FST with disambiguation symbols, and put it in lang_test.
# There is an extra step where we create a loop to "pass through" the
# disambiguation symbols from G.fst.
phone_disambig_symbol=`grep \#0 $dir/phones.syl2phn.txt | awk '{print $2}'`
syl_disambig_symbol=`grep \#0 $dir/syls.txt | awk '{print $2}'`

utils/make_lexicon_fst.pl --pron-probs $tmpdir/lexiconp_disambig.syl2phn.txt $sil_prob $silphone '#'$ndisambig | \
   fstcompile --isymbols=$dir/phones.syl2phn.txt --osymbols=$dir/syls.txt \
   --keep_isymbols=false --keep_osymbols=false |   \
   fstaddselfloops  "echo $phone_disambig_symbol |" "echo $syl_disambig_symbol |" | \
   fstarcsort --sort_type=olabel > $dir/L_disambig.syl2phn.fst || exit 1;

utils/make_lexicon_fst.pl --pron-probs $tmpdir/lexiconp_disambig.syl2phn.txt $sil_prob $silphone '#'$ndisambig | \
  fstcompile --isymbols=$dir/phones.syl2phn.txt --osymbols=$dir/syls.txt \
  --keep_isymbols=false --keep_osymbols=false | \
  fstdeterminizestar | fstrmsymbols $dir/phones/disambig.syl2phn.int | \
  fstarcsort --sort_type=olabel > $dir/Ldet.syl2phn.fst || exit 1;

echo "$(basename $0): validating output directory"
! utils/validate_lang.pl $dir && echo "$(basename $0): error validating output" &&  exit 1;

exit 0;

# Create a file that describes the word-boundary information for
# each phone.  5 categories.
if $position_dependent_phones; then
  cat $dir/phones/{silence,nonsilence}.txt | \
    awk '/_I$/{print $1, "internal"; next;} /_B$/{print $1, "begin"; next; }
         /_S$/{print $1, "singleton"; next;} /_E$/{print $1, "end"; next; }
         {print $1, "nonword";} ' > $dir/phones/word_boundary.txt
else
  echo "not supported yet!" && exit 1;
fi

# Create word symbol table.
cat $tmpdir/lexiconp.txt | awk '{print $1}' | sort | uniq  | \
 awk 'BEGIN{print "<eps> 0";} {printf("%s %d\n", $1, NR);} END{printf("#0 %d\n", NR+1);} ' \
  > $dir/words.txt || exit 1;

}
